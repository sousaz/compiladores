/* Trabalho01TokenManager.java */
/* Generated By:JavaCC: Do not edit this line. Trabalho01TokenManager.java */
import java.io.FileInputStream;
import java.io.File;
import java.io.IOException;

/** Token Manager. */
@SuppressWarnings ("unused")
public class Trabalho01TokenManager implements Trabalho01Constants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
      debugStream.println("   No more string literal token matches are possible.");
   switch (pos)
   {
      case 0:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 31;
            return 4;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 31;
            return 8;
         }
         if ((active0 & 0x600000L) != 0L)
         {
            jjmatchedKind = 31;
            return 89;
         }
         if ((active0 & 0x180000L) != 0L)
         {
            jjmatchedKind = 31;
            return 21;
         }
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 31;
            return 13;
         }
         if ((active0 & 0x40000000L) != 0L)
            return 32;
         return -1;
      case 1:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
            return 7;
         }
         if ((active0 & 0x2f80000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
            return 90;
         }
         return -1;
      case 2:
         if ((active0 & 0x3f80000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
            return 90;
         }
         return -1;
      case 3:
         if ((active0 & 0x3e00000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 3;
            }
            return 90;
         }
         if ((active0 & 0x180000L) != 0L)
            return 90;
         return -1;
      case 4:
         if ((active0 & 0x3f00000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
            return 90;
         }
         return -1;
      case 5:
         if ((active0 & 0x1900000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 5;
            return 90;
         }
         if ((active0 & 0x2600000L) != 0L)
            return 90;
         return -1;
      case 6:
         if ((active0 & 0x900000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 6;
            return 90;
         }
         if ((active0 & 0x1000000L) != 0L)
            return 90;
         return -1;
      case 7:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 7;
            return 90;
         }
         if ((active0 & 0x100000L) != 0L)
            return 90;
         return -1;
      case 8:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 8;
            return 90;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   debugStream.println("   No more string literal token matches are possible.");
   debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 4;
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 34:
         return jjStopAtPos(0, 39);
      case 40:
         return jjStopAtPos(0, 26);
      case 41:
         return jjStopAtPos(0, 27);
      case 44:
         return jjStopAtPos(0, 35);
      case 59:
         return jjStopAtPos(0, 34);
      case 61:
         return jjStartNfaWithStates_0(0, 30, 32);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x180000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 123:
         return jjStopAtPos(0, 28);
      case 125:
         return jjStopAtPos(0, 29);
      default :
      debugStream.println("   No string literal matches possible.");
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 1;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x980000L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 2;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x180000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 3;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 4;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000L);
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 5;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 90);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 111:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 90);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 90);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 6;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 105:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 90);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 7;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 111:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 90);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 8;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
      debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   debugStream.println("   Possible string literal matches : { "
 +
         jjKindsForBitVector(0, active0)  + " } ");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      return 9;
   }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 23, 90);
         break;
      default :
      debugStream.println("   No string literal matches possible.");
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   debugStream.println("   No more string literal token matches are possible.");
   debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 89;
   int i = 1;
   jjstateSet[0] = startState;
      debugStream.println("   Starting NFA to match one of : " + jjKindsForStateVector(curLexState, jjstateSet, 0, 1));
      debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(0, 4); }
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 70;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(5, 10); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(11, 16); }
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(0, 4); }
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 70;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(5, 10); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(11, 16); }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(0, 4); }
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 70;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(5, 10); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(11, 16); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(0, 4); }
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 70;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(5, 10); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(11, 16); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     { jjCheckNAddStates(17, 19); }
                  }
                  else if ((0xac0000000000L & l) != 0L)
                  {
                     if (kind > 18)
                        kind = 18;
                  }
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                  }
                  else if (curChar == 33)
                     { jjCheckNAdd(32); }
                  else if (curChar == 61)
                     { jjCheckNAdd(32); }
                  if (curChar == 47)
                     { jjAddStates(20, 21); }
                  else if (curChar == 62)
                     { jjCheckNAdd(32); }
                  else if (curChar == 60)
                     { jjCheckNAdd(32); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(0, 4); }
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 70;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(5, 10); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(11, 16); }
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(0, 4); }
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 70;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(5, 10); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(11, 16); }
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(0, 4); }
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 79;
                  else if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 70;
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(5, 10); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(11, 16); }
                  break;
               case 30:
                  if ((0xac0000000000L & l) != 0L && kind > 18)
                     kind = 18;
                  break;
               case 31:
                  if ((0x5000000000000000L & l) != 0L && kind > 32)
                     kind = 32;
                  break;
               case 32:
                  if (curChar == 61 && kind > 32)
                     kind = 32;
                  break;
               case 33:
                  if (curChar == 60)
                     { jjCheckNAdd(32); }
                  break;
               case 34:
                  if (curChar == 62)
                     { jjCheckNAdd(32); }
                  break;
               case 35:
                  if (curChar == 61)
                     { jjCheckNAdd(32); }
                  break;
               case 36:
                  if (curChar == 33)
                     { jjCheckNAdd(32); }
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  { jjCheckNAddStates(17, 19); }
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  { jjCheckNAdd(38); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(39, 40); }
                  break;
               case 40:
                  if (curChar == 44)
                     { jjCheckNAdd(41); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  { jjCheckNAdd(41); }
                  break;
               case 51:
                  if (curChar == 47)
                     { jjAddStates(20, 21); }
                  break;
               case 52:
                  if (curChar != 47)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAdd(53); }
                  break;
               case 53:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  { jjCheckNAdd(53); }
                  break;
               case 54:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(55, 56); }
                  break;
               case 55:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(55, 56); }
                  break;
               case 56:
                  if (curChar == 42)
                     { jjCheckNAddStates(22, 24); }
                  break;
               case 57:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(58, 56); }
                  break;
               case 58:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(58, 56); }
                  break;
               case 59:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(0, 4); }
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(64, 65); }
                  break;
               case 65:
                  if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(25, 27); }
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(28, 33); }
                  break;
               case 70:
                  if (curChar == 43 && kind > 36)
                     kind = 36;
                  break;
               case 71:
                  if (curChar == 43)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(5, 10); }
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(73, 74); }
                  break;
               case 74:
                  if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(34, 37); }
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(38, 44); }
                  break;
               case 79:
                  if (curChar == 45 && kind > 36)
                     kind = 36;
                  break;
               case 80:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(11, 16); }
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(82, 83); }
                  break;
               case 83:
                  if (curChar == 44)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(45, 48); }
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(49, 55); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(56, 59); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddStates(60, 63); }
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(64, 68); }
                  else if (curChar == 95)
                     { jjCheckNAddStates(69, 72); }
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(73, 77); }
                  else if (curChar == 95)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(78, 80); }
                  }
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 89:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(56, 59); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddStates(60, 63); }
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(64, 68); }
                  else if (curChar == 95)
                     { jjCheckNAddStates(69, 72); }
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(73, 77); }
                  else if (curChar == 95)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(78, 80); }
                  }
                  break;
               case 8:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(56, 59); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddStates(60, 63); }
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(64, 68); }
                  else if (curChar == 95)
                     { jjCheckNAddStates(69, 72); }
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(73, 77); }
                  else if (curChar == 95)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(78, 80); }
                  }
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 7:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(56, 59); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddStates(60, 63); }
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(64, 68); }
                  else if (curChar == 95)
                     { jjCheckNAddStates(69, 72); }
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(73, 77); }
                  else if (curChar == 95)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(78, 80); }
                  }
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(60, 63); }
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(69, 72); }
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(78, 80); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 5:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(81, 91); }
                  }
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 26;
                  if (curChar == 98)
                     { jjAddStates(92, 93); }
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 21;
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 13;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 8;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 21:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(56, 59); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddStates(60, 63); }
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(64, 68); }
                  else if (curChar == 95)
                     { jjCheckNAddStates(69, 72); }
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(73, 77); }
                  else if (curChar == 95)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(78, 80); }
                  }
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 13:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(56, 59); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddStates(60, 63); }
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(64, 68); }
                  else if (curChar == 95)
                     { jjCheckNAddStates(69, 72); }
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(73, 77); }
                  else if (curChar == 95)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(78, 80); }
                  }
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 90:
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(56, 59); }
                  }
                  else if (curChar == 95)
                     { jjCheckNAddStates(60, 63); }
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(64, 68); }
                  else if (curChar == 95)
                     { jjCheckNAddStates(69, 72); }
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(73, 77); }
                  else if (curChar == 95)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(78, 80); }
                  }
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(60, 63); }
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(69, 72); }
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     { jjCheckNAddStates(78, 80); }
                  }
                  break;
               case 0:
                  if (curChar == 101 && kind > 8)
                     kind = 8;
                  break;
               case 1:
                  if (curChar == 108)
                     { jjCheckNAdd(0); }
                  break;
               case 2:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 3:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 6:
                  if (curChar == 114 && kind > 8)
                     kind = 8;
                  break;
               case 9:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 116 && kind > 8)
                     kind = 8;
                  break;
               case 11:
                  if (curChar == 97)
                     { jjCheckNAdd(10); }
                  break;
               case 12:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 103 && kind > 8)
                     kind = 8;
                  break;
               case 16:
               case 23:
                  if (curChar == 110)
                     { jjCheckNAdd(15); }
                  break;
               case 17:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 114)
                     { jjCheckNAdd(10); }
                  break;
               case 20:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 22:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 24:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if (curChar == 110)
                     { jjCheckNAdd(10); }
                  break;
               case 29:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 42:
                  if (curChar == 98)
                     { jjAddStates(92, 93); }
                  break;
               case 43:
                  if (curChar == 110 && kind > 8)
                     kind = 8;
                  break;
               case 44:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 116)
                     { jjCheckNAdd(0); }
                  break;
               case 50:
                  if (curChar == 121)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 53:
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  { jjCheckNAddTwoStates(55, 56); }
                  break;
               case 57:
               case 58:
                  { jjCheckNAddTwoStates(58, 56); }
                  break;
               case 60:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(81, 91); }
                  break;
               case 61:
                  if (curChar != 95)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(78, 80); }
                  break;
               case 62:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(78, 80); }
                  break;
               case 68:
                  if (curChar == 95)
                     { jjCheckNAddStates(69, 72); }
                  break;
               case 69:
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(69, 72); }
                  break;
               case 77:
                  if (curChar == 95)
                     { jjCheckNAddStates(60, 63); }
                  break;
               case 78:
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(60, 63); }
                  break;
               case 86:
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(73, 77); }
                  break;
               case 87:
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(64, 68); }
                  break;
               case 88:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  { jjCheckNAddStates(56, 59); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 53:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(55, 56); }
                  break;
               case 57:
               case 58:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(58, 56); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if (jjmatchedKind != 0 && jjmatchedKind != 0x7fffffff)
         debugStream.println("   Currently matched the first " + (jjmatchedPos + 1) + " characters as a " + tokenImage[jjmatchedKind] + " token.");
      if ((i = jjnewStateCnt) == (startsAt = 89 - (jjnewStateCnt = startsAt)))
         return curPos;
      debugStream.println("   Possible kinds of longer matches : " + jjKindsForStateVector(curLexState, jjstateSet, startsAt, i));
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
      debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, "\163\145\160\141", 
"\163\145\160\141\161\156\141\157", "\164\162\141\155\160\157", "\155\157\143\157\164\141", 
"\144\145\163\145\155\142\165\143\150\141", "\143\150\145\147\141\141\151", "\146\165\156\143\141\157", "\50", "\51", 
"\173", "\175", "\75", null, null, null, "\73", "\54", null, null, null, "\42", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   62, 61, 64, 65, 63, 69, 68, 73, 74, 71, 72, 78, 77, 82, 83, 80, 
   81, 38, 39, 40, 52, 54, 57, 56, 59, 62, 61, 67, 62, 61, 64, 65, 
   63, 67, 69, 68, 71, 76, 69, 68, 73, 74, 71, 72, 76, 78, 77, 80, 
   85, 78, 77, 82, 83, 80, 81, 85, 62, 61, 63, 88, 78, 77, 80, 81, 
   69, 68, 71, 72, 87, 69, 68, 71, 72, 78, 77, 80, 81, 86, 62, 61, 
   63, 61, 68, 71, 77, 80, 81, 86, 72, 87, 63, 88, 48, 50, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      debugStream.println("Returning the <EOF> token.\n");
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
   {
      debugStream.println("Skipping character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ")");
         curChar = input_stream.BeginToken();
   }
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
      debugStream.println("Current character : " + TokenMgrError.addEscapes(String.valueOf(curChar)) + " (" + (int)curChar + ") at line " + input_stream.getEndLine() + " column " + input_stream.getEndColumn());
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
      {
         debugStream.println("   Putting back " + (curPos - jjmatchedPos - 1) + " characters into the input stream.");
         input_stream.backup(curPos - jjmatchedPos - 1);
      }
    debugStream.println("****** FOUND A " + tokenImage[jjmatchedKind] + " MATCH (" + TokenMgrError.addEscapes(new String(input_stream.GetSuffix(jjmatchedPos + 1))) + ") ******\n");
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

protected static final int[][][] statesForState = {
 {
   { 0 },
   { 1 },
   { 2 },
   { 3 },
   { 4, 61, 68, 71, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 5, 9, 14, 18, 22, 27, 29, 30, 31, 33, 34, 35, 36, 37, 42, 51, 60, },
   { 6 },
   { 7, 62, 61, 69, 68, 71, 78, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 8, 61, 68, 71, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 5, 9, 14, 18, 22, 27, 29, 30, 31, 33, 34, 35, 36, 37, 42, 51, 60, },
   { 10 },
   { 11 },
   { 12 },
   { 13, 61, 68, 71, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 5, 9, 14, 18, 22, 27, 29, 30, 31, 33, 34, 35, 36, 37, 42, 51, 60, },
   { 15 },
   { 16 },
   { 17 },
   { 5, 9, 14, 18, 22, 27, 29, 30, 31, 33, 34, 35, 36, 37, 42, 51, 60, },
   { 19 },
   { 20 },
   { 21, 61, 68, 71, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 5, 9, 14, 18, 22, 27, 29, 30, 31, 33, 34, 35, 36, 37, 42, 51, 60, },
   { 23 },
   { 24 },
   { 25 },
   { 26 },
   { 5, 9, 14, 18, 22, 27, 29, 30, 31, 33, 34, 35, 36, 37, 42, 51, 60, },
   { 28 },
   { 5, 9, 14, 18, 22, 27, 29, 30, 31, 33, 34, 35, 36, 37, 42, 51, 60, },
   { 5, 9, 14, 18, 22, 27, 29, 30, 31, 33, 34, 35, 36, 37, 42, 51, 60, },
   { 5, 9, 14, 18, 22, 27, 29, 30, 31, 33, 34, 35, 36, 37, 42, 51, 60, },
   { 32 },
   { 5, 9, 14, 18, 22, 27, 29, 30, 31, 33, 34, 35, 36, 37, 42, 51, 60, },
   { 5, 9, 14, 18, 22, 27, 29, 30, 31, 33, 34, 35, 36, 37, 42, 51, 60, },
   { 5, 9, 14, 18, 22, 27, 29, 30, 31, 33, 34, 35, 36, 37, 42, 51, 60, },
   { 5, 9, 14, 18, 22, 27, 29, 30, 31, 33, 34, 35, 36, 37, 42, 51, 60, },
   { 5, 9, 14, 18, 22, 27, 29, 30, 31, 33, 34, 35, 36, 37, 42, 51, 60, },
   { 38 },
   { 39 },
   { 40 },
   { 41 },
   { 5, 9, 14, 18, 22, 27, 29, 30, 31, 33, 34, 35, 36, 37, 42, 51, 60, },
   { 43 },
   { 44 },
   { 45 },
   { 46 },
   { 47 },
   { 48 },
   { 49 },
   { 50 },
   { 5, 9, 14, 18, 22, 27, 29, 30, 31, 33, 34, 35, 36, 37, 42, 51, 60, },
   { 52 },
   { 53 },
   { 54 },
   { 55 },
   { 56 },
   { 57 },
   { 58 },
   { 59 },
   { 5, 9, 14, 18, 22, 27, 29, 30, 31, 33, 34, 35, 36, 37, 42, 51, 60, },
   { 62, 61, 69, 68, 71, 78, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 62, 61, 69, 68, 71, 78, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 62, 61, 69, 68, 71, 78, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 64 },
   { 65 },
   { 66 },
   { 67 },
   { 62, 61, 69, 68, 71, 78, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 62, 61, 69, 68, 71, 78, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 70 },
   { 62, 61, 69, 68, 71, 78, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 62, 61, 69, 68, 71, 78, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 73 },
   { 74 },
   { 75 },
   { 76 },
   { 62, 61, 69, 68, 71, 78, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 62, 61, 69, 68, 71, 78, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 79 },
   { 62, 61, 69, 68, 71, 78, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 62, 61, 69, 68, 71, 78, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 82 },
   { 83 },
   { 84 },
   { 85 },
   { 62, 61, 69, 68, 71, 78, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 62, 61, 69, 68, 71, 78, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 62, 61, 69, 68, 71, 78, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 61, 68, 71, 77, 80, 81, 86, 72, 87, 63, 88, },
   { 62, 61, 69, 68, 71, 78, 77, 80, 81, 86, 72, 87, 63, 88, },
},

};
protected static final int[][] kindForState = {
{ 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  18, 
  32, 
  32, 
  32, 
  32, 
  32, 
  32, 
  33, 
  33, 
  33, 
  33, 
  33, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  8, 
  6, 
  6, 
  6, 
  7, 
  7, 
  7, 
  7, 
  7, 
  7, 
  31, 
  31, 
  31, 
  31, 
  31, 
  31, 
  31, 
  31, 
  36, 
  36, 
  36, 
  36, 
  36, 
  36, 
  36, 
  36, 
  36, 
  36, 
  36, 
  36, 
  36, 
  36, 
  36, 
  36, 
  36, 
  36, 
  36, 
  36, 
  31, }
};
  int kindCnt = 0;
  protected final String jjKindsForBitVector(int i, long vec)
  {
    String retVal = "";
    if (i == 0)
       kindCnt = 0;
    for (int j = 0; j < 64; j++)
    {
       if ((vec & (1L << j)) != 0L)
       {
          if (kindCnt++ > 0)
             retVal += ", ";
          if (kindCnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[i * 64 + j];
       }
    }
    return retVal;
  }


  protected final String jjKindsForStateVector(int lexState, int[] vec, int start, int end)
  {
    boolean[] kindDone = new boolean[40];
    String retVal = "";
    int cnt = 0;
    for (int i = start; i < end; i++)
    {
     if (vec[i] == -1)
       continue;
     int[] stateSet = statesForState[curLexState][vec[i]];
     for (int j = 0; j < stateSet.length; j++)
     {
       int state = stateSet[j];
       if (!kindDone[kindForState[lexState][state]])
       {
          kindDone[kindForState[lexState][state]] = true;
          if (cnt++ > 0)
             retVal += ", ";
          if (cnt % 5 == 0)
             retVal += "\n     ";
          retVal += tokenImage[kindForState[lexState][state]];
       }
     }
    }
    if (cnt == 0)
       return "{  }";
    else
       return "{ " + retVal + " }";
  }


void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public Trabalho01TokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public Trabalho01TokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 89; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x9ffffc01c1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[89];
    private final int[] jjstateSet = new int[2 * 89];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
