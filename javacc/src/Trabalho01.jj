options {
	static = false;
	DEBUG_PARSER = true;
	DEBUG_TOKEN_MANAGER = true;
}

PARSER_BEGIN(Trabalho01)
import java.io.FileInputStream;
import java.io.File;
import java.io.IOException;

public class Trabalho01{
	public static void main(String args[]) throws ParseException {
		try {
			System.out.println("lendo um arquivo fonte...");
			FileInputStream fis = new FileInputStream(new File("..//javacc//src//trabalho01.txt"));
			Trabalho01 parser = new Trabalho01(fis);
			parser.Start();
			System.out.println("Arquivo fonte processado corretamente");
		} catch(IOException e) {
			System.out.println("Falha ao abrir o arquivo");
			System.exit(0);
		}
	}
}

PARSER_END(Trabalho01)

SKIP : { " " | "\t" | "\n" | "\r" | "\r\n" }

TOKEN : {
  < COMENTARIO_LINHA : "//" ((~["\n", "\r"])*) >
}

TOKEN : {
	< COMENTARIO_BLOCO : "/*" (~["*"])* "*" (~["*","/"] (~["*"])* "*" | "*")* "/" >
}

TOKEN :
{
< TIPO : (<INT> | <STRING>|<BYTE>|<SHORT>|<LONG>|<FLOAT>)|<DOUBLE>|<CHAR>|<BOOLEAN> > |
< #INT : "int"> |
< #STRING : "String"> |
< #BYTE : "byte" > |
< #SHORT : "short" > |
< #LONG : "long" > |
< #FLOAT : "float" > |
< #DOUBLE : "double" > |
< #CHAR : "char" > |
< #BOOLEAN : "boolean" >
}

TOKEN: {
	< OPERADOR_ARITMETICO : ("+" | "-" | "/" | "*") >
}


TOKEN : {
	< IF : "sepa" >
}

TOKEN : {
	< ELSE : "sepaqnao" >
}

TOKEN : {
	< WHILE : "trampo" >
}

TOKEN : {
	< FOR : "mocota" >
}

TOKEN : {
	< INPUT : "desembucha" >
}

TOKEN : {
	< PRINT : "chegaai" > 
}

TOKEN : {
	< FUNCAO : "funcao" > 
}

TOKEN : {
  < PARENTESE_A : "(" >
}

TOKEN : {
  < PARENTESE_F : ")" >
}

TOKEN : {
	< CHAVE_A : "{" >
}

TOKEN : {
	< CHAVE_F : "}" >
}

TOKEN : {
	< ATRIBUICAO : "=" >
}

TOKEN : {
	< LITERAL : < LETTER > (< NUMBER > | <LETTER > | "_")* >
}

TOKEN : {
	< OPERADOR_RELACIONAL : ("<" | "<=" | ">" | ">=" | "==" | "!=") >
}

TOKEN : {
	<  VALUE : < NUMBER > >
}

TOKEN : {
	< PONTO_VIRGULA : ";" >
}

TOKEN : {
	< VIRGULA : "," >
}

TOKEN : {
	<  INC_DEC : (< LITERAL >"++") | (< LITERAL >"--") >
}

TOKEN : { < #NUMBER : ([ "0"-"9" ]) + | ([ "0"-"9" ])+ "," ([ "0"-"9" ])+ > }

TOKEN : { < #LETTER : ([ "a"-"z" ])+ > }

// TODO literal pode ser numero tambem

void IF(): {}
{
  < IF > < PARENTESE_A > < LITERAL >  <OPERADOR_RELACIONAL > < LITERAL > < PARENTESE_F > < CHAVE_A > (IF())? < CHAVE_F > (ELSE())?
}

void ELSE(): {}
{
  < ELSE > < CHAVE_A > (IF())? < CHAVE_F >
}

void WHILE(): {}
{
  < WHILE >  < PARENTESE_A > < LITERAL >  <OPERADOR_RELACIONAL > < LITERAL > < PARENTESE_F > < CHAVE_A > < CHAVE_F >
}

void FOR(): {}
{
  < FOR > < PARENTESE_A > < TIPO > < LITERAL > < ATRIBUICAO > < VALUE > < PONTO_VIRGULA > < LITERAL > < OPERADOR_RELACIONAL > < VALUE > < PONTO_VIRGULA > < INC_DEC > < PARENTESE_F > < CHAVE_A > (FOR())? < CHAVE_F >
}

void INPUT(): {}
{
  < INPUT > < PARENTESE_A > < LITERAL > < PARENTESE_F >
}

void PRINT(): {}
{
  <  PRINT > < PARENTESE_A > (("\""< LITERAL >"\"" (< VIRGULA > < LITERAL >)*) | < LITERAL > | < VALUE >) < PARENTESE_F >
}

void FUNCAO(): {}
{
  < FUNCAO > < LITERAL > < PARENTESE_A > (< TIPO > < LITERAL > (< VIRGULA > < TIPO > < LITERAL >)*) < PARENTESE_F > < CHAVE_A > < CHAVE_F >
}

void Start():
{}
{
//  ((< COMENTARIO_LINHA >) | (< COMENTARIO_BLOCO >))* < EOF >
	(FUNCAO())+ < EOF >
}
